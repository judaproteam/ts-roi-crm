generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  INSTALLER
  PRJ_MNGR
  ADMIN
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  name      String?   @default(dbgenerated())
  role      Role      @default(INSTALLER)
  email     String    @unique
  phone     String?
  otp       String?
  projects  Project[]
  company   Company   @relation(fields: [companyId], references: [id])

  gglSub  String?
  gglName String?
  picture String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  companyId Int
}

model Company {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]
  User      User[]
}

model Project {
  id        Int     @id @default(autoincrement())
  name      String
  company   Company @relation(fields: [companyId], references: [id])
  companyId Int
  User      User?   @relation(fields: [userId], references: [id])
  userId    Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Part {
  id   Int    @id @default(autoincrement())
  name String
  desc String
  qntt Int
  qr   Qr[]

  prjId   Int
  tasksId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, prjId])
}

model MainTask {
  id      Int      @id @default(autoincrement())
  title   String
  desc    String
  tasksId Int
  prjId   Int
  order   Int
  pic     Boolean? @default(false)
  vid     Boolean? @default(false)
  mngr    Boolean? @default(false)
  Task    Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id           Int      @id @default(autoincrement())
  mainTask     MainTask @relation(fields: [mainTaskId], references: [id])
  pic          String?
  vid          String?
  mngrApproved Boolean? @default(false)

  mainTaskId  Int
  qr          Qr?       @relation(fields: [qrId], references: [id])
  qrId        Int?
  completed   Boolean?  @default(false)
  completedBy String?
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Rejects   Reject[]
}

model Reject {
  id           Int      @id @default(autoincrement())
  reject       String
  rejectAt     DateTime
  rejectBy     String
  rejectPics   String[]
  rejectVids   String[]
  rejectSolved Boolean  @default(false)

  task Task @relation(fields: [taskId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    Int
}

model Qr {
  id       Int    @id @default(autoincrement())
  qrNum    Int
  prjId    Int
  floor    Int
  aptNum   Int
  locInApt String

  part    Part   @relation(fields: [partId], references: [id])
  partId  Int
  tasks   Task[]
  setupBy Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([qrNum, prjId])
  @@index([qrNum, prjId])
}
